<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.ash</title>
    <link>http://ashblog.ru/</link>
    <description>Recent content on .ash</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-RU</language>
    <lastBuildDate>Sat, 24 Sep 2016 19:41:48 +0200</lastBuildDate>
    <atom:link href="http://ashblog.ru/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>24092016</title>
      <link>http://ashblog.ru/post/24092016/</link>
      <pubDate>Sat, 24 Sep 2016 19:41:48 +0200</pubDate>
      
      <guid>http://ashblog.ru/post/24092016/</guid>
      <description>&lt;p&gt;+++

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/24092016.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;В солнечный Зеленоградск за кофе и пиццей.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SP.CSOM.Pitfalls: UserCollection</title>
      <link>http://ashblog.ru/sp/get-userbyid-pitfall/</link>
      <pubDate>Fri, 09 Sep 2016 08:25:58 +0200</pubDate>
      
      <guid>http://ashblog.ru/sp/get-userbyid-pitfall/</guid>
      <description>&lt;p&gt;Что будет выведено на экран после выполнения следующего кода?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var byEmail = Context.Web.SiteUsers.GetByEmail(&amp;quot;user1@ashblog.ru&amp;quot;);
var byID = Context.Web.SiteUsers.GetById(10); 

Context.Load(byEmail, u =&amp;gt; u.Title);
Context.Load(byID, u =&amp;gt; u.Title);
Context.ExecuteQuery();

var byEmail2 = Context.Web.SiteUsers.GetByEmail(&amp;quot;user1@ashblog.ru&amp;quot;);
var byID2 = Context.Web.SiteUsers.GetById(10);

var titleByEmail2 = byEmail2.Title;
var titleByID2 = byID2.Title;

Console.WriteLine(email);
Console.WriteLine(byid);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В первых двух строках мы запрашиваем пользователя по Id и Email.&lt;br /&gt;
Затем указываем, что необходимо проинициализировать свойство Title для возвращаемого объекта User.
И выполняем запрос - ExecuteQuery.&lt;br /&gt;
Если мы попробуем сейчас вывести значение свойства Title для переменных
byEmail и byID - то увидим два одинаковых значения.&lt;/p&gt;

&lt;p&gt;Следующие две строки идентичны первым двум, за исключением того, что пользователя мы присваиваем другим переменным (byEmail2, byID2).
Мы не выполняем дополнительный запрос ExecuteQuery(), т.к. ожидаем, что свойство SiteUsers уже проинициализировано.
Далее присваиваем значение свойства Title переменным titleByEmail2 и titleByID2.
И выводим значения на экран. Однако при запуске этого кода, мы получим исключение&lt;br /&gt;
&lt;em&gt;The property or field has not been initialized.&lt;/em&gt;&lt;br /&gt;
в строке:&lt;br /&gt;
&lt;em&gt;var titleByID2 = byID2.Title;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Оказывается, что метод GetById не ищет пользователя в проинициализированной коллекции.
В этом методе всегда создаётся запрос на получение нового значения (пользователя).
Именно, из-за этого возникло исключение, т.к. для &amp;ldquo;нового&amp;rdquo; пользователя мы не отправляли
запрос на сервер и не запрашивали свойство Title.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Lovers Complaint</title>
      <link>http://ashblog.ru/post/max-richter/</link>
      <pubDate>Tue, 30 Aug 2016 19:36:17 +0200</pubDate>
      
      <guid>http://ashblog.ru/post/max-richter/</guid>
      <description>&lt;iframe frameborder=&#34;0&#34;  
    style=&#34;border:none;max-width:640px;height:100px;width:100%;&#34;  
    height=&#34;100&#34;  
    src=&#34;https://music.yandex.ru/iframe/#track/2812922/2413918/hide/cover/&#34;&gt;Слушайте &lt;a href=&#39;https://music.yandex.ru/album/2413918/track/2812922&#39;&gt;A Lovers Complaint&lt;/a&gt; — &lt;a href=&#39;https://music.yandex.ru/artist/201862&#39;&gt;Max Richter&lt;/a&gt; на Яндекс.Музыке&lt;/iframe&gt;
    
</description>
    </item>
    
    <item>
      <title>SP Online: Debug Remote Event Receivers &#43; ngrok</title>
      <link>http://ashblog.ru/sp/debug-remote-event-receivers/</link>
      <pubDate>Mon, 29 Aug 2016 12:08:21 +0200</pubDate>
      
      <guid>http://ashblog.ru/sp/debug-remote-event-receivers/</guid>
      <description>

&lt;p&gt;Обычно отладка Remote Event Receivers в SharePoint Online выполняется с помощью Service Bus.
Я писал подробно про это &lt;a href=&#34;http://blog.virtosoftware.com/2014/12/creating-and-debugging-of-remote-event.html&#34;&gt;здесь&lt;/a&gt; и &lt;a href=&#34;http://blog.virtosoftware.com/2015/01/adding-remote-event-receivers-to-list.html&#34;&gt;здесь&lt;/a&gt;.
Сегодня мы рассмотрим другой (более простой) путь решения этой задачи.&lt;/p&gt;

&lt;p&gt;Если коротко, то всё что нам нужно - это использовать &lt;strong&gt;&lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
На странице продукта коротко и ёмко описано его предназначение: ngrok - secure tunnels to localhost.&lt;/p&gt;

&lt;p&gt;Первым делом качаем &lt;a href=&#34;https://ngrok.com/download&#34;&gt;ngrok&lt;/a&gt;&lt;br /&gt;
Распаковываем архив в любую директорию.&lt;br /&gt;
Открываем Visual Studio и создаём проект SharePoint Add-In (Provider-Hosted).&lt;br /&gt;
Кликаем мышкой по имени add-in project (не web) -&amp;gt; нажимем F4.&lt;br /&gt;
Выбираем &lt;strong&gt;true&lt;/strong&gt; для параметра &lt;strong&gt;Handle add-in installed&lt;/strong&gt;&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-addin-installed-rer.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Handle add-in installed&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;В результате предыдущего действия будет создан &lt;strong&gt;.svc&lt;/strong&gt; сервис, который будет вызываться после того,
как наше решение будет установлено на портале.
Этот сервис является примером удалённого обработчика данных (Remote Event Receiver).&lt;/p&gt;

&lt;p&gt;Если на данном этапе нажать F5, то мы получим предупреждение от Visual Studio, о том, мы мы не сможем
отлаживать Remote Event Receivers, т.к. для этого необходимо настроить Service Bus.&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-addin-servicebus-msg.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Предупреждение: MS Service Bus Connection&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;В процессе отладки адресом нашего приложения будет localhost, который недоступен извне.
Именно поэтому в Visual Studio появилось сообщение о настройке Service Bus.&lt;/p&gt;

&lt;p&gt;ngrok позволит решить нам эту проблему.&lt;br /&gt;
Итак, открываем папку с &lt;strong&gt;ngrok.exe&lt;/strong&gt; и запускаем команду&lt;br /&gt;
&lt;strong&gt;ngrok http -host-header=&amp;ldquo;localhost:[port]&amp;rdquo; [port]&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;программу-ngrok-не-закрываем-туннель-работает-пока-работает-ngrok:4fd096ac965106c4e57ad3113c9eb263&#34;&gt;Программу ngrok не закрываем (туннель работает, пока работает ngrok)&lt;/h4&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/ngrok-run.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;[port]&lt;/strong&gt; заменяем на порт, который используется IIS Express для доступа к нашем сайту на localhost.
Порт можно получить выбрав Web-проект и нажав F4.

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-addin-localhost-port.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Получаем порт от localhost (для http)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;После запуска ngrok мы получили временный адрес, по которому можно обращаться извне к localhost.&lt;br /&gt;
Нажимаем правой кнопкой мыши по web-проекту, выбираем &lt;strong&gt;Set as StartUp Project&lt;/strong&gt;. Жмём &lt;strong&gt;F5&lt;/strong&gt;&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/set-as-startup-project.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Set as StartUp Project&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Открываем любой браузер и вводим адрес туннеля (используем https, &lt;a href=&#34;https://e1e1e1e1e.ngrok.io&#34;&gt;https://e1e1e1e1e.ngrok.io&lt;/a&gt;)
В результате получим окно вида:

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/ngrok-access-ok.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Отлично, наш компьютер доступен извне. Теперь любой желающий может получить доступ к нашему
сайту, зная ngrok-адрес. На картинке выше мы видим стандартное сообщение об ошибке, которое
появилось в SharePointContextFilter.&lt;/p&gt;

&lt;p&gt;Попробуем запустить add-in в режиме отладки. Для этого вернём тип запуска проекта.&lt;br /&gt;
Выбираем в Solution Explorer наше решение, клик правой кнопкой мыши, выбираем &lt;strong&gt;Set StartUp Projects&amp;hellip;&lt;/strong&gt;&lt;br /&gt;
Выбираем &lt;strong&gt;Multiple startup projects&lt;/strong&gt;, нажимаем &lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Теперь необходимо открыть и изменить файл &lt;strong&gt;AppManifest.xml&lt;/strong&gt;, для того, чтобы сменить адрес, по которому будет происходить
обращение к нашему сервису. Выбираем файл в Solution Explorer -&amp;gt; жмём F7.&lt;br /&gt;
Заменяем значение элемента &lt;strong&gt;InstallEventEndpoint&lt;/strong&gt; на ngrok-адрес туннеля.

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/ngrok-rer-address.PNG&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Открываем файл с кодом сервиса &lt;strong&gt;AppEventReceiver.svc.cs&lt;/strong&gt;, ставим breakpoint в первойм строчке метода &lt;strong&gt;ProcessEvent&lt;/strong&gt;
Запускаем отладку: &lt;strong&gt;F5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&amp;hellip;ждём&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Ура! Breakpoint сработал.&lt;br /&gt;
Однако, если выполнить шаги дальше, то мы увидим, что &lt;strong&gt;clientContext&lt;/strong&gt; равен &lt;strong&gt;null&lt;/strong&gt;. Причина в том, что в
результате запуска в режиме отладки, Visual Studio прописывает localhost адрес в качестве remote endpoint
для нашего приложения.

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/ngrok-endpoint-problem.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Почти получилось...&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Для того, чтобы обойти эту проблему зарегистриуем наш add-in вручную.
Октроем страницу: [dev_site_url]/_layouts/appregnew.aspx,&lt;br /&gt;
Где [dev_site_url] - адрес сайта, на котором будет тестироваться приложение&lt;br /&gt;
(например: &lt;a href=&#34;https://testportal.sharepoint.com/sites/dev/_layouts/appregnew.aspx&#34;&gt;https://testportal.sharepoint.com/sites/dev/_layouts/appregnew.aspx&lt;/a&gt;)&lt;br /&gt;
Нажимаем Generate для создания Client ID и Client Secret. В качестве доменного App Domain и Redirect Url указываем адрес
полученный при запуске ngrok. После этого жмём кнопку Save и полученную информацию сохраняем куда-нибудь в текстовый файл
(чтобы не потерять Client Secret).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-reg-addin.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Вернёмся в Visual Studio, выбираем web-проект, и устанавливаем для него &lt;strong&gt;Set as StartUp Project&lt;/strong&gt;. Открываем файл web.config
и заменяем в appSettings ClientId и ClientSecret на сгенерированные значения.
Далее нажимаем правой кнопкой по add-in проекту и выбираем &lt;strong&gt;Publish&amp;hellip;&lt;/strong&gt;.&lt;br /&gt;
В &lt;strong&gt;Current profile:&lt;/strong&gt; выбираем &lt;strong&gt;New..&lt;/strong&gt;. Затем &lt;strong&gt;Create new profile&lt;/strong&gt;.
Вводим любое слово для Profile Name (например, spNgrokProfile). Нажимаем кнопку &lt;strong&gt;Next&lt;/strong&gt;.
Далее вводим Client ID и Client Secret, полученные на странице &lt;strong&gt;appregnew.aspx&lt;/strong&gt;.
И жмём кнопку &lt;strong&gt;Finish&lt;/strong&gt;. После этого мы можем собрать add-in: нажимаем &lt;strong&gt;Package the add-in&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;В открывшемся окне вводим https адрес ngrok-туннелля, и проверяем Client ID. Далее &lt;strong&gt;Finish&lt;/strong&gt;.
После сборки add-in откроется папка с app-файлом. Далее открываем в браузере dev-сайт -&amp;gt; Site Contents -&amp;gt;
открываем библиотеку &lt;strong&gt;App Packages&lt;/strong&gt;. Нажимаем кнопку Upload и загружаем app-файл.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-apppackages-lib.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Возвращаемся в Visual Studio, нажимаем &lt;strong&gt;F5&lt;/strong&gt; (не забываем проверить, что web-проект выбран в качестве StartUp Project).
Итак, к этому моменту у нас залит add-in в App Packages, запущен web-проект в режиме отладки,
запущен ngrok, и установлен breakpoint в Event Receiver (метод ProcessEvent).
Осталось установить Add-In и убедиться, что breakpoint сработает. Для на dev-сайте переходим в список
&lt;strong&gt;Apps in Testing&lt;/strong&gt; -&amp;gt; нажимаем на &lt;strong&gt;new app to deploy&lt;/strong&gt; -&amp;gt; в модальном окне выбираем package: spNgrok -&amp;gt;
адрес (Deploy app to) не меняем -&amp;gt; нажимаем &lt;strong&gt;Deploy&lt;/strong&gt; -&amp;gt; далее &lt;strong&gt;Trust It&lt;/strong&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-deploy-addin.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Вернёмся в &lt;strong&gt;Site Contents&lt;/strong&gt; и увидим, что наше приложение устанавливается.
Установка может занять несколько минут (даже для пустого add-in, и ), поэтому не удивляемся,
что наш breakpoint ещё не сработал. Ждём&amp;hellip;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-addin-install-inprogress.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;In Progress&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;И вот спустя несколько минут срабатывает breakpoint:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-fire-breakpoint.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Breakpoint&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Нажимаем &lt;strong&gt;F5&lt;/strong&gt; для прололжения выполнения работы программы, и ловим исключение: &lt;strong&gt;AudienceUriValidationFailedException&lt;/strong&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-audience-exception.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Audience Exception&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;В ошибке говорится, что-то про localhost. Ок. Для того, чтобы решить эту проблему нам необходимо выполнить
последний шаг. Открываем web.config нашего web-проекта и добавляем в &lt;strong&gt;appSettings&lt;/strong&gt; следующую строчку:&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;&amp;lt;add key=&amp;quot;HostedAppHostNameOverride&amp;quot; value=&amp;quot;e1e1e1e1e.ngrok.io;localhost&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/strong&gt;
(Замените &lt;strong&gt;e1e1e1e1e.ngrok.io&lt;/strong&gt; на ваш адрес ngrok-туннеля без https префикса)&lt;br /&gt;
При сохранении web.config, Visual Studio сообщит, что необходимо выйти из debug-режима. Нажимаем OK.
Снова нажимаем &lt;strong&gt;F5&lt;/strong&gt;. Возвращаемся в Site Contents и видим, что при установке возникла ошибка:
&lt;strong&gt;Sorry, something went wrong with adding the app. Click to retry.&lt;/strong&gt;&lt;br /&gt;
Нажимаем &lt;strong&gt;Click to retry&lt;/strong&gt; и ждём срабатывание breakpoint.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spngrok-final-breakpoint-ok.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Breakpoint сработал. ClientContext не равен null&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Цель достигнута. ngrok отлично подходит для отладки Remote Event Receivers списков и элементов, webhooks, httpsend action.
Так же можно использовать его для демонстрации работы add-in без развёртывания приложения на внешний хостинг.
Минусом является то, что в бесплатной версии ngrok-туннель живёт, пока не закрыто приложение ngrok.
В платной версии можно создавать постоянные адреса.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ashblog.ru/post/27082016/</link>
      <pubDate>Sun, 28 Aug 2016 19:31:41 +0200</pubDate>
      
      <guid>http://ashblog.ru/post/27082016/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/svetlogorsk-145km.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;145km. Kaliningrad-Svetlogorks-Zelenogradsk-Lesnoe-Kaliningrad&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>SP.Dev: Генерация тестовых данных. Создание элементов в списке.</title>
      <link>http://ashblog.ru/sp/list-fill-test-data/</link>
      <pubDate>Fri, 26 Aug 2016 09:06:04 +0200</pubDate>
      
      <guid>http://ashblog.ru/sp/list-fill-test-data/</guid>
      <description>&lt;p&gt;Создание тестовых данных в SharePoint - одна из тех задач, которая периодически возникает во время:
разработки, тестирования, демонстрации портала.
Сегодня рассмотрим как можно быстро создать список, заполненный случайными данными.&lt;/p&gt;

&lt;p&gt;Для этого нам понадобится nuget package: &lt;a href=&#34;https://www.nuget.org/packages/SPS.SPRandom.Core/&#34;&gt;SPS.SPRandom.Core&lt;/a&gt;&lt;br /&gt;
Проект пока в статусе Alpha, однако для решения некоторых задач уже может использоваться.&lt;br /&gt;
Для примера, я создал проект в Visual Studio - Console Program.
В &amp;ldquo;Package Manager Console&amp;rdquo; пишем команду:&lt;br /&gt;
&lt;strong&gt;Install-Package SPS.SPRandom.Core&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Заменим код файла Program.cs на следующий:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using OfficeDevPnP.Core;
using SPS.SPRandom.Core;
using System.Configuration;

namespace SPConsole
{
    class Program
    {
        static void Main(string[] args)
        {
            AuthenticationManager m = new AuthenticationManager();

            var siteUrl = ConfigurationManager.AppSettings[&amp;quot;TestSiteUrl&amp;quot;];
            var userLogin = ConfigurationManager.AppSettings[&amp;quot;TestUserLogin&amp;quot;];
            var userPassword = ConfigurationManager.AppSettings[&amp;quot;TestUserPassword&amp;quot;];

            var listName = &amp;quot;MyTestList&amp;quot;;

            using (var context = m.GetSharePointOnlineAuthenticatedContextTenant(siteUrl, userLogin, userPassword))
            {
                //init generator with current sp context
                SPRandomGenerator spGen = new SPRandomGenerator(context);

                //create test list (generic type).
                var testList = spGen.CreateList(context.Web, listName, onlyGenericListBaseType: true);

                //add fields for testList 
                var fieldInternaNames = spGen.CreateFieldsOfSupportedTypes(testList, addPrefixBeforeFieldName: true);

                //create 50 items with random data
                spGen.FillListWithRandomData(testList, 50);

            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Итак, сначала мы создаём контекст для подключения к SharePoint Online.&lt;br /&gt;
Затем инициализируем генератор &lt;strong&gt;SPRandomGenerator&lt;/strong&gt;.&lt;br /&gt;
Создаём список &lt;strong&gt;CreateList&lt;/strong&gt;. Последний параметр указывает, что создать нужно именно список (Generic List). В противном случае герератор может создать либо список, либо библиотеку (для создания библиотеки есть отдeльный метод &lt;strong&gt;CreateLibrary&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Следующая строка кода вызывает метод &lt;strong&gt;CreateFieldsOfSupportedTypes&lt;/strong&gt;, для того, чтобы создать в списке колонки всех поддерживаемых типов&lt;br /&gt;
&lt;em&gt;(на момент написания статьи: Integer, Text, Note, DateTime, Choice, Lookup, Boolean, Number, Currency, URL, MultiChoice,.User)&lt;/em&gt;&lt;br /&gt;
Параметр &lt;strong&gt;addPrefixBeforeFieldName&lt;/strong&gt; указывает, что к имени колонки будет добавлено название типа колонки. Например: &lt;strong&gt;Text_&lt;/strong&gt;DIaxD&lt;/p&gt;

&lt;p&gt;В строке &lt;strong&gt;spGen.FillListWithRandomData(testList, 50);&lt;/strong&gt; - вызывается код для создания 50 элементов, которые будут заполнены случайными данными.
Выполним код и посмотрим результат:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/spgen_50_items.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Созданный список с элементами.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Проект пока в самом &amp;ldquo;зачаточном&amp;rdquo; варианте.&lt;br /&gt;
Код здесь: &lt;a href=&#34;https://biogenez.github.io/SPS.SPRandom/&#34;&gt;https://biogenez.github.io/SPS.SPRandom/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ashblog.ru/post/veloart-cafe/</link>
      <pubDate>Fri, 26 Aug 2016 08:52:57 +0200</pubDate>
      
      <guid>http://ashblog.ru/post/veloart-cafe/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/veloart_wall.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;warszawa: veloart cafe&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>SP: Перенос списков между коллекциями сайтов (&#43; Person, Lookup поля)</title>
      <link>http://ashblog.ru/sp/sponline-migrate-list/</link>
      <pubDate>Wed, 24 Aug 2016 15:47:25 +0200</pubDate>
      
      <guid>http://ashblog.ru/sp/sponline-migrate-list/</guid>
      <description>&lt;p&gt;В этом посте мы рассмотрим пример переноса списка с содержимым между коллекциями сайтов.
&amp;ldquo;Из коробки&amp;rdquo; нам доступен следующий вариант: сохраняем список как шаблон (list settings -&amp;gt; save list as template).
Cкачиваем сохранённый шаблон из List Template Gallery, и загружаем его в List Template Gallery на той
коллекции сайтов, где мы хотим восстановить список.&lt;/p&gt;

&lt;p&gt;Это вариант работает в том случае, если в списке не используются колонки типа Person и Lookup.
Колонки с типом Person будут восстановлены, но значения в этих колонках могут быть искажены.
Значения в колонках типа Person сохраняются как &lt;strong&gt;19;#User Name&lt;/strong&gt; (где 19 - ID пользователя, User Name - имя пользователя).
А восстанавливаются значения по ID. ID пользователя уникален в рамках коллекции сайтов. Поэтому при переносе списка на другую
коллекцию сайтов, может оказаться, что этот ID будет присвоен другому пользователю, либо вовсе отсутствовать.&lt;/p&gt;

&lt;p&gt;Lookup поле не получится восстановить через List Template. Даже если мы восстановим (предварительно сохранив в качестве шаблона)
список на который ссылается Lookup поле, значения (в списке с Lookup полем) не будут восстановлены. В шаблоне списка сохраняется
ID списка, на который ссылается колонка. А при восстановлении из шаблона, список получает уникальный ID.&lt;/p&gt;

&lt;p&gt;Чтобы решить проблему с переноcом воспользуемся: &lt;a href=&#34;http://download.virtosoftware.com/utils/Virto.BackupAndRecovery.Cmd.zip&#34;&gt;Virto Backup &amp;amp; Recovery Tool&lt;/a&gt;&lt;br /&gt;
 Это командная утилита, которая позволяет сохранять/восстанавивать данные в SharePoint Online.&lt;/p&gt;

&lt;p&gt;Для примера я создал два списка: &lt;strong&gt;Test_List&lt;/strong&gt; и &lt;strong&gt;Test_List_2&lt;/strong&gt;. В список Test_List добавлены два поля:&lt;br /&gt;
 - Person (тип Person or Group)&lt;br /&gt;
 - MyLookup (тип Lookup) - ссылается на поле Title из списка Test_List_2&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/test_list.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;По умолчанию &lt;strong&gt;Virto Backup &amp;amp; Recovery&lt;/strong&gt; сохраняет в backup большое кол-во информации (пользователи, списки, права, группы и т.д.)&lt;br /&gt;
Т.к. нам необходимо перенести только два списка, потребуется создать конфигурационный файл.&lt;/p&gt;

&lt;p&gt;Находим в папке с утилитой (virtobr.exe) файл &lt;strong&gt;Config.xml&lt;/strong&gt;. И копируем его с новым названием, например &lt;strong&gt;TestConfig.xml&lt;/strong&gt;.&lt;br /&gt;
Открываем TestConfig.xml в любом текстовом редакторе (я использую &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;VS Code&lt;/a&gt;)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/testconfig_before.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;TestConfig.xml до изменений.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Для нашего примера заменим все значения &lt;strong&gt;true&lt;/strong&gt; на &lt;strong&gt;false&lt;/strong&gt;, за исключением &lt;strong&gt;SiteUsers&lt;/strong&gt; и &lt;strong&gt;WebLists&lt;/strong&gt;.&lt;br /&gt;
Параметр SiteUsers необходим для того, чтобы утилита смогла правильно перенести пользователей (либо установить соответствие между ними по User Login).&lt;br /&gt;
А WebLists - для того, чтобы были сохранены списки.&lt;br /&gt;
Так как нам не требуется сохранять все списки, а только два (Test_List и Test_List_2), добавим информацию об этом в наш конфигурационный файл.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;IncludeFilter&amp;gt;
      &amp;lt;Webs&amp;gt;
        &amp;lt;WebBackupConfig&amp;gt;
          &amp;lt;ServerRelativeUrl&amp;gt;/sites/b&amp;lt;/ServerRelativeUrl&amp;gt;
          &amp;lt;Lists&amp;gt;
            &amp;lt;ListBackupConfig&amp;gt;
              &amp;lt;Title&amp;gt;Test_List&amp;lt;/Title&amp;gt;
            &amp;lt;/ListBackupConfig&amp;gt;
            &amp;lt;ListBackupConfig&amp;gt;
              &amp;lt;Title&amp;gt;Test_List_2&amp;lt;/Title&amp;gt;
            &amp;lt;/ListBackupConfig&amp;gt;
          &amp;lt;/Lists&amp;gt;
        &amp;lt;/WebBackupConfig&amp;gt;
      &amp;lt;/Webs&amp;gt;
    &amp;lt;/IncludeFilter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ServerRelativeUrl&lt;/strong&gt; - относительный адрес сайта, на котором находятся списки.&lt;br /&gt;
Ниже примеры значений:&lt;br /&gt;
&lt;a href=&#34;https://testportal.sharepoint.com&#34;&gt;https://testportal.sharepoint.com&lt;/a&gt;, значение &lt;strong&gt;/&lt;/strong&gt; (главный сайт)&lt;br /&gt;
&lt;a href=&#34;https://testportal.sharepoint.com/subsite&#34;&gt;https://testportal.sharepoint.com/subsite&lt;/a&gt;, значение &lt;strong&gt;/subsite&lt;/strong&gt; (подсайт)
&lt;a href=&#34;https://testportal.sharepoint.com/sites/testsite&#34;&gt;https://testportal.sharepoint.com/sites/testsite&lt;/a&gt;, значение &lt;strong&gt;/sites/testsite&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Итоговое содержимое xml-файла TestConfig.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;GlobalOptions xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
  &amp;lt;BackupConfig&amp;gt;
    &amp;lt;Recursive&amp;gt;false&amp;lt;/Recursive&amp;gt;
    &amp;lt;SiteGroups&amp;gt;false&amp;lt;/SiteGroups&amp;gt;
    &amp;lt;SiteOwners&amp;gt;false&amp;lt;/SiteOwners&amp;gt;
    &amp;lt;SiteUsers&amp;gt;true&amp;lt;/SiteUsers&amp;gt;
    &amp;lt;WebContentTypes&amp;gt;false&amp;lt;/WebContentTypes&amp;gt;
    &amp;lt;WebFields&amp;gt;false&amp;lt;/WebFields&amp;gt;
    &amp;lt;WebLists&amp;gt;true&amp;lt;/WebLists&amp;gt;
    &amp;lt;WebRoleDefinition&amp;gt;false&amp;lt;/WebRoleDefinition&amp;gt;
    &amp;lt;WebRoleAssignments&amp;gt;false&amp;lt;/WebRoleAssignments&amp;gt;
    &amp;lt;IncludeFilter&amp;gt;
      &amp;lt;Webs&amp;gt;
        &amp;lt;WebBackupConfig&amp;gt;
          &amp;lt;ServerRelativeUrl&amp;gt;/sites/b&amp;lt;/ServerRelativeUrl&amp;gt;
          &amp;lt;Lists&amp;gt;
            &amp;lt;ListBackupConfig&amp;gt;
              &amp;lt;Title&amp;gt;Test_List&amp;lt;/Title&amp;gt;
            &amp;lt;/ListBackupConfig&amp;gt;
            &amp;lt;ListBackupConfig&amp;gt;
              &amp;lt;Title&amp;gt;Test_List_2&amp;lt;/Title&amp;gt;
            &amp;lt;/ListBackupConfig&amp;gt;
          &amp;lt;/Lists&amp;gt;
        &amp;lt;/WebBackupConfig&amp;gt;
      &amp;lt;/Webs&amp;gt;
    &amp;lt;/IncludeFilter&amp;gt;
  &amp;lt;/BackupConfig&amp;gt;
  &amp;lt;RestoreConfig&amp;gt;
  &amp;lt;/RestoreConfig&amp;gt;
&amp;lt;/GlobalOptions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь запускаем cmd.exe (win -&amp;gt; cmd.exe), и переходим в папку с утилитой &lt;strong&gt;Virto Backup &amp;amp; Recovery&lt;/strong&gt;&lt;br /&gt;
(В VS Code можно нажать &lt;strong&gt;F1&lt;/strong&gt;, ввести &lt;strong&gt;Create new intergrated terminal&lt;/strong&gt;, нажать enter)&lt;/p&gt;

&lt;p&gt;Запускаем &lt;strong&gt;virtobr.exe&lt;/strong&gt; с параметрами:&lt;br /&gt;
virtobr.exe -o backup -s &lt;a href=&#34;https://testportal.sharepoint.com/sites/b&#34;&gt;https://testportal.sharepoint.com/sites/b&lt;/a&gt; -d c:\TestBackup -u mylogin@testportal.com -p MyP@$sWoRD1 &lt;code&gt;--&lt;/code&gt;ConfigPath TestConfig.xml&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-o&lt;/strong&gt; : тип выполняемой операции (backup,recovery)&lt;br /&gt;
&lt;strong&gt;-s&lt;/strong&gt; : адрес сайта (либо папки, для операции recovery)&lt;br /&gt;
&lt;strong&gt;-d&lt;/strong&gt; : адрес папки (сайта, для операции recovery), в которую будет сохранён backup (папка будет создана автоматически и к ней будет добавлен TimeStamp (например TestBackup&lt;strong&gt;_201608251011&lt;/strong&gt;))&lt;br /&gt;
&lt;strong&gt;-u&lt;/strong&gt; : логин пользователя, для подключения к SharePoint&lt;br /&gt;
&lt;strong&gt;-p&lt;/strong&gt; : пароль пользователя, для подключения к SharePoint&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;--&lt;/code&gt;ConfigPath&lt;/strong&gt; : название конфигурационного файла (если не указать, будет использоваться стандартный Config.xml)&lt;/p&gt;

&lt;p&gt;В результате выполнения команды будет создана папка (вида TestBackup&lt;strong&gt;_201608251011&lt;/strong&gt;), в которой будут файлы
для созданного backup.&lt;/p&gt;

&lt;p&gt;Для того, чтобы восстановить (перенести) сохранённые списки, потребуется запустить утилиту ещё раз, с небольшими изменениями в параметрах:&lt;br /&gt;
virtobr.exe -o recovery -s &amp;ldquo;c:\TestBackup_201608251011&amp;rdquo; -d &amp;ldquo;&lt;a href=&#34;https://testportal.sharepoint.com/sites/c&amp;quot;&#34;&gt;https://testportal.sharepoint.com/sites/c&amp;quot;&lt;/a&gt; -u mylogin@testportal.com -p MyP@$sWoRD1&lt;/p&gt;

&lt;p&gt;В качестве операции (-o) указываем &lt;strong&gt;recovery&lt;/strong&gt;, источником (-s) теперь служит адрес папки с backup, а назначением (-d) - адрес другой коллекции сайтов.&lt;br /&gt;
Указывать конфигурационный файл не требуется.&lt;/p&gt;

&lt;p&gt;После того, как восстановление будет выполнено, проверим результат:

&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/test_list_recovery.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Как видим, у нас появился список с элементами, в которых восстановлены поля типа Lookup и Person.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ashblog.ru/post/first/</link>
      <pubDate>Sat, 09 Jan 2016 18:46:53 +0200</pubDate>
      
      <guid>http://ashblog.ru/post/first/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/winter.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;-15&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ashblog.ru/post/second/</link>
      <pubDate>Sat, 09 Jan 2016 18:46:53 +0200</pubDate>
      
      <guid>http://ashblog.ru/post/second/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/bsea.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;baltic sea&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ashblog.ru/post/third/</link>
      <pubDate>Sat, 09 Jan 2016 18:46:53 +0200</pubDate>
      
      <guid>http://ashblog.ru/post/third/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/stone.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;stone&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>.я</title>
      <link>http://ashblog.ru/about/</link>
      <pubDate>Sat, 09 Jan 2016 18:45:08 +0200</pubDate>
      
      <guid>http://ashblog.ru/about/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://ashblog.ru/images/me.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;-&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h5 id=&#34;о:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;.о&lt;/h5&gt;

&lt;p&gt;.name(alexander)&lt;br /&gt;
.russia(kaliningrad)&lt;br /&gt;
.it(c#,js,sharepoint,office365)&lt;br /&gt;
.sport(running,riding)&lt;/p&gt;

&lt;h5 id=&#34;блог:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;.блог&lt;/h5&gt;

&lt;p&gt;.hugo(&lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;)&lt;br /&gt;
.theme(inspired-by-slender)&lt;br /&gt;
.no(comments)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>